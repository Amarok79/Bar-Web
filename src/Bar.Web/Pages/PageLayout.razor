@using System.Reflection
<div class="page">

    <header class="header">
        <div hidden="@(!HeaderVisible)">
            <h1 class="header-text">@HeaderText</h1>
            <h2 class="header-subtext">@HeaderSubText</h2>
        </div>
        <div class="header-image">
        </div>
    </header>

    <section class="banner">
        <div hidden="@(!BannerVisible)">
            <h3 class="banner-text">@BannerText</h3>
        </div>
        <div class="banner-image">
        </div>
    </section>

    <section class="content">
        @ChildContent
    </section>

    <footer class="footer">
        <div class="footer-image">
        </div>
        <div class="footer-content">
            <div>@FooterContent</div>
            <div class="footer-version">@VersionNumber</div>
        </div>
    </footer>

</div>


@code
{
#nullable disable

    private String VersionNumber { get; set; }


    [Inject]
    public IBackendService BackendService { get; set; }


    [Parameter]
    public Boolean HeaderVisible { get; set; } = true;

    [Parameter]
    [CanBeNull]
    public String HeaderText { get; set; } = "Die \"KroKo\" Hausbar";

    [Parameter]
    [CanBeNull]
    public String HeaderSubText { get; set; } = "Cocktails und Drinks für Freunde und Gäste";

    [Parameter]
    public Boolean BannerVisible { get; set; } = false;

    [Parameter]
    [CanBeNull]
    public String BannerText { get; set; }

    [Parameter]
    [CanBeNull]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    [CanBeNull]
    public RenderFragment FooterContent { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var backendVersion = await BackendService.GetVersion();

        var frontendVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>()?.InformationalVersion;

        VersionNumber = $"Bar-Web v{frontendVersion}  |  Bar-Backend v{backendVersion}";
    }
}
